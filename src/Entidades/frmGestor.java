package Entidades;

import Entidades_ordenamiento.OrdenamientoAsc;
import Entidades_ordenamiento.OrdenamientoDesc;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author diegod
 */
public class frmGestor extends javax.swing.JFrame {

    Conexion oCon;
    ArrayList<Album> lAlbum;
    ArrayList<Integer> lIDsAlbumes;
    DefaultTableModel modeloAlbum;
    DefaultTableModel modeloCancion;
    private final Color fondo_oscuro = new Color(30, 30, 30);
    private final Color texto_oscuro = Color.WHITE;
    private boolean modoOscuroActivo = false;
    Cifrado cifrador;

    
    public frmGestor() throws SQLException {
        initComponents();
        //inicializador de array y tablas
        lAlbum = new ArrayList<>();
        lIDsAlbumes = new ArrayList<>();
        modeloAlbum = (DefaultTableModel) this.jTableAlbum.getModel();
        modeloCancion = (DefaultTableModel) this.jTableCancion.getModel();
        cifrador = new Cifrado("diegogo");
        modeloCancion.getDataVector().removeAllElements();
        oCon = new Conexion("172.20.10.7", "FREE", "C###diego", "oracle");
        this.consultar();
        actualizarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtCalcular = new javax.swing.JTextField();
        txtNombreAlbum = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        bttnCalcular = new javax.swing.JButton();
        txtArtista = new javax.swing.JTextField();
        txtShowMinutos = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtGenero = new javax.swing.JTextField();
        bttnAsc = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        bttnDesc = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        bttnExCSV = new javax.swing.JButton();
        txtDuracion = new javax.swing.JTextField();
        bttnInCSV = new javax.swing.JButton();
        txtNombreCancion = new javax.swing.JTextField();
        bttnHMTL = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAlbum = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        bttnModoOscuro = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCancion = new javax.swing.JTable();
        bttnAgregar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        bttnBuscar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        bttnCalcular1 = new javax.swing.JButton();
        bttnActualizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel9.setText("Calcular duración total:");

        jLabel10.setText("Ingrese nombre del Álbum:");

        jLabel1.setText("Agregar Álbum:");

        jLabel11.setText("Duración:");

        jLabel2.setText("Nombre del Álbum:");

        jLabel3.setText("Artista:");

        jLabel12.setText("minutos");

        bttnCalcular.setText("Calcular");
        bttnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnCalcularActionPerformed(evt);
            }
        });

        txtShowMinutos.setEditable(false);

        jLabel4.setText("Género:");

        jLabel13.setText("Ordenar Álbum:");

        bttnAsc.setText("Ascendente");
        bttnAsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAscActionPerformed(evt);
            }
        });

        jLabel5.setText("Agregar Canción:");

        bttnDesc.setText("Descendente");
        bttnDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnDescActionPerformed(evt);
            }
        });

        jLabel6.setText("Nombre la Canción:");

        jLabel7.setText("Duración:");

        bttnExCSV.setText("Exportar CSV");
        bttnExCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnExCSVActionPerformed(evt);
            }
        });

        bttnInCSV.setText("Importar CSV");
        bttnInCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnInCSVActionPerformed(evt);
            }
        });

        bttnHMTL.setText("Exportar HTML");
        bttnHMTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnHMTLActionPerformed(evt);
            }
        });

        jTableAlbum.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre del Álbum", "Artista", "Género:"
            }
        ));
        jTableAlbum.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAlbumMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableAlbum);

        jLabel14.setText("Manejo de Archivos:");

        bttnModoOscuro.setBackground(new java.awt.Color(30, 30, 30));
        bttnModoOscuro.setForeground(new java.awt.Color(255, 255, 255));
        bttnModoOscuro.setText("Modo Oscuro");
        bttnModoOscuro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnModoOscuroActionPerformed(evt);
            }
        });

        jTableCancion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nombre de la Canción:", "Duración:"
            }
        ));
        jTableCancion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCancionMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableCancion);

        bttnAgregar.setText("Agregar");
        bttnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAgregarActionPerformed(evt);
            }
        });

        jLabel8.setText("Buscar Álbum:");

        bttnBuscar.setText("Buscar");
        bttnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnBuscarActionPerformed(evt);
            }
        });

        bttnCalcular1.setText("Limpiar Campos");
        bttnCalcular1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnCalcular1ActionPerformed(evt);
            }
        });

        bttnActualizar.setText("Actualizar");
        bttnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bttnModoOscuro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bttnCalcular1)
                .addGap(675, 675, 675))
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtNombreAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtArtista, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(txtGenero, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNombreCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(txtDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(bttnAgregar)
                    .addComponent(jLabel5))
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(bttnAsc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bttnDesc, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addComponent(jLabel8)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(bttnBuscar)))
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(bttnInCSV, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(bttnExCSV, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bttnHMTL, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                            .addComponent(bttnActualizar, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel11)
                                        .addComponent(jLabel10))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(txtCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(bttnCalcular))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(txtShowMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel12)))))))))
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(80, 80, 80)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(jLabel13)
                        .addGap(9, 9, 9)
                        .addComponent(bttnAsc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bttnDesc))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel8)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtNombreAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtArtista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bttnBuscar)))
                            .addComponent(jLabel3)
                            .addComponent(bttnActualizar))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNombreCancion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(bttnAgregar))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel14)
                                .addGap(13, 13, 13)
                                .addComponent(bttnExCSV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bttnInCSV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bttnHMTL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bttnCalcular))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(txtShowMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bttnModoOscuro)
                    .addComponent(bttnCalcular1))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void bttnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnCalcularActionPerformed
        double totalDuracion  = TotalizarDuracion(this.txtCalcular.getText().trim());
        this.txtShowMinutos.setText(Double.toString(totalDuracion));
    }//GEN-LAST:event_bttnCalcularActionPerformed

    private void bttnAscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAscActionPerformed
        OrdenamientoAsc oAsc = new OrdenamientoAsc();
        this.lAlbum.sort(oAsc);
        this.actualizarTabla();
    }//GEN-LAST:event_bttnAscActionPerformed

    private void bttnDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnDescActionPerformed
        OrdenamientoDesc oDesc = new OrdenamientoDesc();
        this.lAlbum.sort(oDesc);
        this.actualizarTabla();
    }//GEN-LAST:event_bttnDescActionPerformed

    private void bttnExCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnExCSVActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showSaveDialog(this); // Cambiado a showSaveDialog para seleccionar la ubicación del archivo
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println("Archivo seleccionado: " + selectedFile.getAbsolutePath());

            try (PrintWriter pw = new PrintWriter(selectedFile)) {
                pw.println("Album, Artista, Género, Canción, Duración, AlbumID"); // Encabezados

                try {
                    // Obtener datos de la base de datos
                    ArrayList<Object[]> data = oCon.consultar("SELECT a.NombreAlbum, a.Artista, a.Genero, c.NombreCancion, c.Duracion, c.AlbumID FROM Albums a, Canciones c WHERE a.AlbumID = c.AlbumID");

                    // Escribir los datos en el archivo CSV
                    for (Object[] row : data) {
                        String nombreAlbumEncriptado = cifrador.encriptar(row[0].toString());
                        String artistaEncriptado = cifrador.encriptar(row[1].toString());
                        String generoEncriptado = cifrador.encriptar(row[2].toString());

                        pw.println(nombreAlbumEncriptado + "," + artistaEncriptado + "," + generoEncriptado + "," + row[3] + "," + row[4] + "," + row[5]);
                    }

                    pw.checkError();
                    JOptionPane.showMessageDialog(this, "Archivo exportado correctamente!");

                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error al obtener datos de la base de datos!");
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error al encriptar datos!");
                }

            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Ups, error en exportar archivo!");
            }
        }    
    }//GEN-LAST:event_bttnExCSVActionPerformed

    private void bttnInCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnInCSVActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println("Archivo seleccionado: " + selectedFile.getAbsolutePath());
            importarCSV(selectedFile.getAbsolutePath());
        }
        actualizarTabla();
        
    }//GEN-LAST:event_bttnInCSVActionPerformed

    private void bttnHMTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnHMTLActionPerformed
        PrintWriter pw = null;
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
            int result = fileChooser.showSaveDialog(this);

            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                pw = new PrintWriter(selectedFile); // Use the selected file

                StringBuilder StrLinea = new StringBuilder();
                StrLinea.append("<html><body><table border='2'>" + "\n");
                StrLinea.append("<tr><td><b>Álbum</td><td><b>Artista</td><td><b>Género</td><td><b>Canción</td><td><b>Duración</td></tr>" + "\n");

                for (Album AlbTemp : lAlbum) {
                    for (Cancion cancion : AlbTemp.getlCancion()) {
                        StrLinea.append("<tr>" + "\n");
                        StrLinea.append(String.format("<td>%s</td>%n", AlbTemp.getNombreAlbum()));
                        StrLinea.append(String.format("<td>%s</td>%n", AlbTemp.getArtistaAlbum()));
                        StrLinea.append(String.format("<td>%s</td>%n", AlbTemp.getGeneroAlbum()));
                        StrLinea.append(String.format("<td>%s</td>%n", cancion.getNombreCancion()));
                        StrLinea.append(String.format("<td>%s</td>%n", cancion.getDuracionCancion()));
                        StrLinea.append("</tr>" + "\n");
                    }
                }

                StrLinea.append("</table></body></html>" + "\n");
                pw.append(StrLinea.toString());
                JOptionPane.showMessageDialog(this, "Archivo HTML exportado correctamente!");
            } else {
                // User canceled the file selection
                JOptionPane.showMessageDialog(this, "Operación cancelada por el usuario");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Ups, error en exportar archivo!");
        } finally {
            if (pw != null) {
                pw.close();
            }
        }
    }//GEN-LAST:event_bttnHMTLActionPerformed

    
    private void actualizarTabla() {
//        modeloCancion.setRowCount(0); // Limpiar la tabla de canciones
//        modeloAlbum.setRowCount(0); // Limpiar la tabla de álbumes
//        for (Album album : lAlbum) {
//            for (Cancion cancion : album.getlCancion()) {
//                modeloCancion.addRow(new Object[]{cancion.getNombreCancion(), cancion.getDuracionCancion(), album.getNombreAlbum()});
//            }
//            modeloAlbum.addRow(new Object[]{album.getNombreAlbum(), album.getArtistaAlbum(), album.getGeneroAlbum()});
//        }
//        this.limpiarCampos();
        modeloCancion.setRowCount(0); // Limpiar la tabla de canciones
        modeloAlbum.setRowCount(0); // Limpiar la tabla de álbumes

        try {
            // Obtener datos de álbumes y canciones desde la base de datos
            ArrayList<Object[]> albumData = oCon.consultar("SELECT NombreAlbum, Artista, Genero FROM Albums");
            ArrayList<Object[]> cancionData = oCon.consultar("SELECT NombreCancion, Duracion, AlbumID FROM Canciones");

            // Llenar la tabla de álbumes
            for (Object[] row : albumData) {
                modeloAlbum.addRow(row);
            }

            // Llenar la tabla de canciones
            for (Object[] row : cancionData) {
                modeloCancion.addRow(row);
            }

            this.limpiarCampos();

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al actualizar la tabla.");
        }

    }
    
    private void limpiarCampos() {
        txtNombreAlbum.setText("");
        txtArtista.setText("");
        txtGenero.setText("");
        txtNombreCancion.setText("");
        txtDuracion.setText("");
    }
    
    private double TotalizarDuracion(String NombreAlbum){
        double totalDuracion = 0.0;
        for(Album album : lAlbum){
            if(album.getNombreAlbum().equals(NombreAlbum)){
                for(Cancion cancion : album.getlCancion()){
                    totalDuracion += cancion.getDuracionCancion();
                }
                break;
            }
        }
        return totalDuracion;
    }
    /*MODIFIQUE TODO EL  METODO IMPORTARCSV*/
private void importarCSV(String filePath) {
    try (Scanner scanner = new Scanner(new File(filePath))) {
        String[] header = scanner.nextLine().split(",");
        while (scanner.hasNextLine()) {
            String[] values = scanner.nextLine().split(",");
            String NombreAlbumEncriptado = values[0];
            String ArtistaAlbumEncriptado = values[1];
            String GeneroAlbumEncriptado = values[2];
            String NombreCancion = values[3];
            Double DuracionCancion = Double.parseDouble(values[4]);

            // Desencriptar los nombres del álbum, artista y género
            String NombreAlbum = cifrador.desencriptar(NombreAlbumEncriptado);
            String ArtistaAlbum = cifrador.desencriptar(ArtistaAlbumEncriptado);
            String GeneroAlbum = cifrador.desencriptar(GeneroAlbumEncriptado);

            // Verificar si el álbum ya existe o lo inserta
            int albumID = oCon.BuscarAlbumExistente(NombreAlbum, ArtistaAlbum, GeneroAlbum);
            if (albumID == -1) {
                // Si el álbum no existe, lo inserta
                albumID = oCon.insertarAlbum(NombreAlbum, ArtistaAlbum, GeneroAlbum);
            }

            // Insertar la canción en la base de datos utilizando el ID del álbum
            oCon.insertarCancion(NombreCancion, DuracionCancion, albumID);
            actualizarTabla();
        }
        actualizarTabla();
        JOptionPane.showMessageDialog(this, "Archivo importado correctamente");
    } catch (FileNotFoundException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Archivo no encontrado");
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error en la base de datos");
    } catch (NumberFormatException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al convertir datos");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error desconocido");
    }
}



    private void activarModoOscuro() {
        this.getContentPane().setBackground(fondo_oscuro);
        this.bttnModoOscuro.setBackground(fondo_oscuro);
        this.bttnModoOscuro.setForeground(texto_oscuro);

        applyDarkModeToComponent(this.getContentPane());
        modoOscuroActivo = true;
    }

    private void desactivarModoOscuro() {
        this.getContentPane().setBackground(null);
        this.bttnModoOscuro.setBackground(null);
        this.bttnModoOscuro.setForeground(null);

        restoreDefaultColors(this.getContentPane());
        modoOscuroActivo = false;
    }
    
    private void applyDarkModeToComponent(Component comp) {
        comp.setBackground(fondo_oscuro);
        comp.setForeground(texto_oscuro);

        if (comp instanceof Container) {
            for (Component child : ((Container) comp).getComponents()) {
                applyDarkModeToComponent(child);
            }
        }
    }
    
    private void restoreDefaultColors(Component comp) {
        comp.setBackground(null);
        comp.setForeground(null);

        if (comp instanceof Container) {
            for (Component child : ((Container) comp).getComponents()) {
                restoreDefaultColors(child);
            }
        }
    }
    
    private void jTableAlbumMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAlbumMouseClicked
        int indiceAlbum = this.jTableAlbum.getSelectedRow();

        if (indiceAlbum != -1) { // Verifica si se ha seleccionado una fila válida
            // Obtiene el ID del álbum seleccionado
            int albumID = lAlbum.get(indiceAlbum).getAlbumID();

            // Ahora puedes usar este albumID en otros métodos según sea necesario.
            // ...
            // Continúa mostrando los detalles del álbum como lo hacías anteriormente
            int cantCanciones = this.lAlbum.get(indiceAlbum).getlCancion().size();
            modeloCancion.getDataVector().removeAllElements();
            Album AlbumSeleccionado = this.lAlbum.get(indiceAlbum);
            this.txtNombreAlbum.setText(AlbumSeleccionado.getNombreAlbum());
            this.txtArtista.setText(AlbumSeleccionado.getArtistaAlbum());
            this.txtGenero.setText(AlbumSeleccionado.getGeneroAlbum());
            for (int indiceCancion = 0; indiceCancion < cantCanciones; indiceCancion++) {
                String[] registroCanciones = {
                    this.lAlbum.get(indiceAlbum).getlCancion().get(indiceCancion).getNombreCancion(),
                    Double.toString(this.lAlbum.get(indiceAlbum).getlCancion().get(indiceCancion).getDuracionCancion())
                };
                modeloCancion.addRow(registroCanciones);
            }
        }
    }//GEN-LAST:event_jTableAlbumMouseClicked

    private void bttnModoOscuroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnModoOscuroActionPerformed
        if (!modoOscuroActivo) {
            activarModoOscuro();
        } else {
            desactivarModoOscuro();
        }
    }//GEN-LAST:event_bttnModoOscuroActionPerformed
    
    private void jTableCancionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCancionMouseClicked

    }//GEN-LAST:event_jTableCancionMouseClicked
/*PARTE CORREGIDA ESTAN COMENTADO LOS CAMBIOS O FUNCIONES*/
    private void bttnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAgregarActionPerformed
        // Obtén los valores de los campos de texto
        String NombreAlbum = txtNombreAlbum.getText().trim();
        String ArtistaAlbum = txtArtista.getText().trim();
        String GeneroAlbum = txtGenero.getText().trim();
        String NombreCancion = txtNombreCancion.getText().trim();
        double DuracionCancion = 0.0;

        try {
            // Verifica si la duración de la canción es un número válido
            DuracionCancion = Double.parseDouble(txtDuracion.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "La duración debe ser un número válido");
            return;
        }

        try {
            // Busca si hay algún álbum existente con el método declarado
            int indiceAlbumExistente = oCon.BuscarAlbumExistente(NombreAlbum, ArtistaAlbum, GeneroAlbum);

            if (indiceAlbumExistente != -1) {
                // Si el álbum existe, obtén su ID desde la base de datos
                int albumID = oCon.obtenerIDAlbumDesdeBD(NombreAlbum, ArtistaAlbum, GeneroAlbum);

                if (albumID != -1) {
                    // Inserta la canción en el álbum correspondiente en la base de datos
                    agregarCancionAAbum(albumID, NombreCancion, DuracionCancion);

                    // Actualiza el modelo de la tabla
                    actualizarTabla();
                    //actualizarTabla1();

                    // Refresca la vista de la tabla
                    jTableCancion.repaint();
                } else {
                    JOptionPane.showMessageDialog(this, "Error al obtener el ID del álbum.");
                }
            } else {
                // Si el álbum no existe, inserta un nuevo álbum en la base de datos
                int albumIDGenerado = oCon.insertarAlbum(NombreAlbum, ArtistaAlbum, GeneroAlbum);

                if (albumIDGenerado != -1) {
                    // Inserta la canción en el nuevo álbum
                    agregarCancionAAbum(albumIDGenerado, NombreCancion, DuracionCancion);

                    // Actualiza el modelo de la tabla
                    actualizarTabla();
                    //actualizarTabla1();

                    // Refresca la vista de la tabla
                    jTableAlbum.repaint();
                    jTableCancion.repaint();
                } else {
                    JOptionPane.showMessageDialog(this, "Error al insertar el nuevo álbum.");
                }
            }

            // Limpia los campos
            limpiarCampos();

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al interactuar con la base de datos.");
        }
     
    }//GEN-LAST:event_bttnAgregarActionPerformed
    
    private void agregarCancionAAbum(int albumID, String nombreCancion, double duracionCancion) throws SQLException {
        // Inserta la canción en el álbum correspondiente en la base de datos
        oCon.insertarCancion(nombreCancion, duracionCancion, albumID);
        
        actualizarTabla();
    }
    
    private void bttnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnBuscarActionPerformed
       String buscarAlbum = this.txtBuscar.getText().trim();
       boolean encontrado = false;

    for (Album album : lAlbum) {
        if (album.getNombreAlbum().equalsIgnoreCase(buscarAlbum)) {
            // Limpia los modelos de tabla antes de agregar nuevos datos
            this.modeloAlbum.setRowCount(0);
            this.modeloCancion.setRowCount(0);

            // Agrega los datos del álbum a la tabla de álbumes
            String[] registroAlbum = {album.getNombreAlbum(), album.getArtistaAlbum(), album.getGeneroAlbum()};
            this.modeloAlbum.addRow(registroAlbum);

            // Agrega las canciones del álbum a la tabla de canciones
            for (Cancion cancion : album.getlCancion()) {
                String[] registroCancion = {cancion.getNombreCancion(), String.valueOf(cancion.getDuracionCancion())};
                this.modeloCancion.addRow(registroCancion);
            }

            encontrado = true;
            break;
        }
    }

    if (!encontrado) {
        JOptionPane.showMessageDialog(this, "Álbum no encontrado");
    }
    }//GEN-LAST:event_bttnBuscarActionPerformed

    private void bttnCalcular1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnCalcular1ActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_bttnCalcular1ActionPerformed

    private void bttnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnActualizarActionPerformed
        actualizarTabla();
    }//GEN-LAST:event_bttnActualizarActionPerformed
    /*Cambié el tipo de datos del AlbumID y otros valores a int en lugar de usar Object.*/
    private void consultar() {
        try {
        this.lAlbum.clear();
        ArrayList<Object[]> tmpResultado = this.oCon.consultar("SELECT * FROM Albums");
        if (tmpResultado != null) {
            for (Object[] dato : tmpResultado) {
                int albumID = Integer.parseInt(dato[0].toString());
                String sNombreAlbum = dato[1].toString();
                String sArtistaAlbum = dato[2].toString();
                String sGeneroAlbum = dato[3].toString();

                Album album = new Album(albumID, sNombreAlbum, sArtistaAlbum, sGeneroAlbum);
                this.lAlbum.add(album);

                ArrayList<Object[]> tmpCanciones = this.oCon.consultar("SELECT * FROM Canciones WHERE AlbumID = " + album.getAlbumID());
                if (tmpCanciones != null) {
                    for (Object[] cancionData : tmpCanciones) {
                        String sNombreCancion = cancionData[1].toString();
                        double dDuracion = Double.parseDouble(cancionData[2].toString());

                        Cancion cancion = new Cancion(sNombreCancion, dDuracion);
                        album.agregarCancion(cancion);
                    }
                }
            }
        } else {
            System.out.println("La consulta no devolvió resultados.");
        }
    } catch (Exception ee) {
        ee.printStackTrace();
        System.out.println("Error consultando desde el formulario: " + ee.getMessage());
    }
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmGestor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new frmGestor().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(frmGestor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bttnActualizar;
    private javax.swing.JButton bttnAgregar;
    private javax.swing.JButton bttnAsc;
    private javax.swing.JButton bttnBuscar;
    private javax.swing.JButton bttnCalcular;
    private javax.swing.JButton bttnCalcular1;
    private javax.swing.JButton bttnDesc;
    private javax.swing.JButton bttnExCSV;
    private javax.swing.JButton bttnHMTL;
    private javax.swing.JButton bttnInCSV;
    private javax.swing.JButton bttnModoOscuro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableAlbum;
    private javax.swing.JTable jTableCancion;
    private javax.swing.JTextField txtArtista;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCalcular;
    private javax.swing.JTextField txtDuracion;
    private javax.swing.JTextField txtGenero;
    private javax.swing.JTextField txtNombreAlbum;
    private javax.swing.JTextField txtNombreCancion;
    private javax.swing.JTextField txtShowMinutos;
    // End of variables declaration//GEN-END:variables
}
